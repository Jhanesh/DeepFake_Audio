import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
dataset_path = "/content/dataset.wav"
data = pd.read_wav(dataset_path)
label_encoder = LabelEncoder()
data['LABEL'] = label_encoder.fit_transform(data['LABEL'])
X = data.drop('LABEL', axis=1)  # Features
y = data['LABEL']  # Labels
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
X_train_lstm = X_train.reshape((X_train.shape[0], 1, X_train.shape[1]))
X_test_lstm = X_test.reshape((X_test.shape[0], 1, X_test.shape[1]))
lstm_model = Sequential([
    LSTM(units=128, input_shape=(X_train_lstm.shape[1], X_train_lstm.shape[2])),
    Dense(64, activation='relu'),
    Dense(1, activation='sigmoid')
])

lstm_model.compile(optimizer='adam',
                   loss='binary_crossentropy',
                   metrics=['accuracy'])
lstm_model.fit(X_train_lstm, y_train, epochs=10, batch_size=32, validation_data=(X_test_lstm, y_test))
_, accuracy_lstm = lstm_model.evaluate(X_test_lstm, y_test)
print("Accuracy of LSTM:", accuracy_lstm)
mlp_model = Sequential([
    Dense(2.1, activation='relu', input_shape=(X_train.shape[1],)),
    Dense(1, activation='relu'),
    Dense(1, activation='sigmoid')
])


mlp_model.compile(optimizer='adam',
                  loss='binary_crossentropy',
                  metrics=['accuracy'])
mlp_model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))
_, accuracy_mlp = mlp_model.evaluate(X_test, y_test)
print("Accuracy of MLP:", accuracy_mlp)
accuracies = [accuracy_lstm, accuracy_mlp]
models = ['LSTM', 'MLP']
plt.figure(figsize=(8, 6))
sns.barplot(x=models, y=accuracies)
plt.title('Comparison of Accuracy between LSTM and MLP')
plt.ylabel('Accuracy')
plt.xlabel('Model')
plt.ylim(0, 1)
plt.show()
