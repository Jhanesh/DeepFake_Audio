import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

dataset_path = "Audio_dataset.wav"
data = pd.read_wav(dataset_path)

X = data.drop('LABEL', axis=1)
y = data['LABEL']

label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model_lstm = Sequential([
    LSTM(units=256, input_shape=(X_train.shape[1], 1)),
    Dense(128, activation='relu'),
    Dense(1, activation='sigmoid')
])

model_lstm.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

history_lstm = model_lstm.fit(X_train, y_train, epochs=10, batch_size=16, validation_data=(X_test, y_test))

accuracy_lstm = model_lstm.evaluate(X_test, y_test)[1]
print("Accuracy of LSTM:", accuracy_lstm)

gmm = Sequential([
    Dense(64, input_shape=(X_train.shape[1],)),
    Dense(32, activation='relu'),
    Dense(2, activation='softmax')
])

gmm.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

history_gmm = gmm.fit(X_train, y_train, epochs=10, batch_size=16, validation_data=(X_test, y_test))

y_pred_gmm = gmm.predict(X_test)
y_pred_gmm = np.argmax(y_pred_gmm, axis=1)

accuracy_gmm = accuracy_score(y_test, y_pred_gmm)
print("Accuracy of GMM:", accuracy_gmm)

accuracies = [accuracy_lstm * 100, accuracy_gmm * 100]
models = ['LSTM', 'GMM']

plt.figure(figsize=(8, 6))
sns.barplot(x=models, y=accuracies)
plt.title('Comparison of Accuracy between LSTM and GMM')
plt.ylabel('Accuracy (%)')
plt.xlabel('Model')
plt.ylim(0, 100)
plt.show()
